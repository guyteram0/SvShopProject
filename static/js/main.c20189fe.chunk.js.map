{"version":3,"sources":["components/Shop.js","components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["Shop","props","state","this","name","price","className","style","backgroundColor","onClick","add","Component","Cart","App","products","cart","flag","buyButton","setState","alert","addItem","n","p","totalPrice","map","e","ShowCart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAEqBA,G,wDACrB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,GAHE,E,qDAOL,IAAD,OACL,OACI,6BAEK,oCAAUC,KAAKF,MAAMG,KAArB,KACA,qCAAWD,KAAKF,MAAMI,MAAtB,KAHL,IAGwC,6BACnC,4BAAQC,UAAU,OAAOC,MAAO,CAACC,gBAAgB,SAAUC,QAAS,WAAK,EAAKR,MAAMS,IAAI,EAAKT,MAAMG,KAAK,EAAKH,MAAMI,SAAnH,oB,GAdiBM,cCAbC,E,kDACrB,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,GAHE,E,qDAQX,OACI,6BACG,oCAAUC,KAAKF,MAAMG,KAArB,KACA,qCAAWD,KAAKF,MAAMI,MAAtB,KAFH,IAEsC,kC,GAZhBM,aCEbE,E,4MAEnBX,MAAM,CACLY,SAAS,CAAC,CAACV,KAAK,aAAaC,MAAM,MAAM,CAACD,KAAK,cAAcC,MAAM,MACzD,CAACD,KAAK,eAAeC,MAAM,KAAM,CAACD,KAAK,WAAWC,MAAM,KACxD,CAACD,KAAK,WAAWC,MAAM,MAAM,CAACD,KAAK,eAAeC,MAAM,OAClEU,KAAK,GACLC,MAAK,G,EAGNC,UAAU,WACR,OACE,6BACM,EAAKC,SAAS,CAACH,KAAK,KACpBI,MAAM,uB,EAIhBC,QAAQ,SAACC,EAAEC,GACT,EAAKJ,SAAS,CAACH,KAAK,CAAC,CAACX,KAAKiB,EAAEhB,MAAMiB,IAAhB,mBAAsB,EAAKpB,MAAMa,U,EAEtDQ,WAAW,WACT,IAAIA,EAAY,EAIhB,OAHC,EAAKrB,MAAMa,KAAKS,KAAI,SAACC,GACpB,OAAOF,GAAaE,EAAEpB,SAEjBkB,G,EAETG,SAAS,WACP,OAAuB,GAAnB,EAAKxB,MAAMc,KAEX,yBAAKV,UAAU,MACb,6BACA,0CAAgB,EAAKiB,cACrB,4BAAQjB,UAAU,OAAOC,MAAO,CAACC,gBAAgB,OAAQC,QAAS,EAAKQ,WAAvE,OACA,qCAEA,yBAAKX,UAAU,MACX,EAAKJ,MAAMa,KAAKS,KAAI,SAACC,GACrB,OAAO,kBAAC,EAAD,CAAMrB,KAAMqB,EAAErB,KAAMC,MAAOoB,EAAEpB,MAAOU,KAAM,EAAKb,MAAMa,YAQpE,yBAAKT,UAAU,MACV,EAAKJ,MAAMY,SAASU,KAAI,SAACC,GAC1B,OAAO,kBAAC,EAAD,CAAMrB,KAAMqB,EAAErB,KAAMC,MAAOoB,EAAEpB,MAAOK,IAAK,EAAKU,e,uDAMnD,IAAD,OACP,OACE,yBAAKd,UAAU,OAEZ,4BAAQA,UAAU,OAAOC,MAAO,CAACC,gBAAgB,QAASC,QAAS,WAAK,EAAKS,SAAS,CAACF,MAAK,MAA5F,QAFH,IAEsH,6BAAK,6BACxH,4BAAQV,UAAU,OAAOC,MAAO,CAACC,gBAAgB,QAASC,QAAS,WAAK,EAAKS,SAAS,CAACF,MAAK,MAA5F,QACEb,KAAKuB,gB,GA7DiBf,aCQbgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c20189fe.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Shop extends Component {\r\nconstructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n       \r\n    }\r\n}\r\n    render() {\r\n        return ( \r\n            <div>\r\n                \r\n                 <h3>Name:{this.props.name} </h3>\r\n                 <h3>Price:{this.props.price} </h3> <br/>\r\n                 <button className='btn1' style={{backgroundColor:'green'}} onClick={()=>{this.props.add(this.props.name,this.props.price)}}>Add To Cart</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Cart extends Component {\r\nconstructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n         \r\n    }    \r\n}\r\n    render() {\r\n        return (\r\n            <div>\r\n               <h3>Name:{this.props.name} </h3>\r\n               <h3>Price:{this.props.price} </h3> <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport Shop from './components/Shop.js';\nimport Cart from './components/Cart.js';\nexport default class App extends Component {\n    \n  state={\n   products:[{name:' Computer ',price:3500},{name:' Microwave ',price:2500},\n             {name:' Television ',price:4000},{name:' Laptop ',price:3000},\n             {name:' Camera ',price:5200},{name:' CellPhone  ',price:2800}],            \n   cart:[],\n   flag:false, \n  }\n \n  buyButton=()=>{\n    return(\n      <div>\n           {this.setState({cart:[]})}\n           {alert('Purchase Accepted')}\n      </div>\n    )\n   } \n  addItem=(n,p)=>{\n    this.setState({cart:[{name:n,price:p},...this.state.cart]})  \n  }\n  totalPrice=()=>{\n    let totalPrice= 0;\n    {this.state.cart.map((e)=>{\n      return totalPrice+= e.price\n    })}\n    return totalPrice;\n}\n  ShowCart=()=>{\n    if (this.state.flag == true) { \n      return(\n        <div className='a3'>\n          <div>\n          <h3>totalPrice:{this.totalPrice()}</h3>\n          <button className='btn1' style={{backgroundColor:'red'}} onClick={this.buyButton}>Buy</button> \n          <h1>Cart</h1> \n          </div>\n          <div className='a2'>\n             {this.state.cart.map((e)=>{\n              return <Cart name={e.name} price={e.price} cart={this.state.cart} />  \n          })}   \n       </div>\n        </div>\n      )\n    }\n    else{\n    return(\n      <div className='a1'>\n          {this.state.products.map((e)=>{\n          return <Shop name={e.name} price={e.price} add={this.addItem}/>  \n          })}\n      </div>\n    )\n    } \n  }\n  render() {\n    return (\n      <div className='App'>  \n      {/* <h1>Shop</h1> */}\n         <button className='btn2' style={{backgroundColor:'blue'}} onClick={()=>{this.setState({flag:true})}}>Cart</button> <br/><br/>\n         <button className='btn2' style={{backgroundColor:'blue'}} onClick={()=>{this.setState({flag:false})}}>Shop</button>\n          {this.ShowCart()}   \n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}